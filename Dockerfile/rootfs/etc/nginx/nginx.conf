worker_processes auto;
pid /var/run/nginx.pid;
daemon off;

events {
    worker_connections 1024; 
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type  application/octet-stream;

    access_log off;
    error_log /var/log/nginx/error.log error;
    
    sendfile on;
    keepalive_timeout 15;
    keepalive_disable msie6;
    keepalive_requests 100;
    tcp_nopush on;
    tcp_nodelay on;
    server_tokens off;
    
    gzip on;
    gzip_comp_level 5;
    gzip_min_length 512;
    gzip_buffers 4 8k;
    gzip_proxied any;
    gzip_vary on;
    gzip_disable "msie6";
    gzip_types
        text/css
        text/javascript
        text/xml
        text/plain
        text/x-component
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        application/vnd.ms-fontobject
        font/truetype
        font/opentype
        image/svg+xml;

    upstream rufy_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:/var/www/RuFy/run/gunicorn.sock fail_timeout=0; # ex : server unix:/var/www/RuFy/run/gunicorn.sock fail_timeout=0;
}

server {
    listen 80 default_server;
    server_name _;

    charset utf-8;
    index index.html index.php;
    client_max_body_size 10M;

    access_log /var/log/nginx/rufy-access.log combined;
    error_log /var/log/nginx/rufy-error.log error;
    
    error_page 500 502 503 504 /50x.html;
    location = /50x.html { root /usr/share/nginx/html; }
    root /var/www;

    location = /favicon.ico {
        access_log off;
        log_not_found off;
    }
    
    location ^~<webroot>static {
        satisfy any;
	    allow all;
        alias /var/www/RuFy/static/;  # ex : alias /var/www/RuFy/static/
    }
    
    location ^~<webroot>media {
        satisfy any;
	    allow all;
        alias    /var/www/RuFy/media/;
    }

    location ^~<webroot2> {
        
        satisfy any;
	    allow all;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        if (!-f $request_filename) {
            proxy_pass http://127.0.0.1:8000;
            break;
        }
    }
}

}